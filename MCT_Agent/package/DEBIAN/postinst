#!/bin/bash

set -e


###############################################################################
## DESCRITPTION                                                              ##
###############################################################################
## postinst script for mct-agent
##
## see: dh_installdeb(1)
##
## For details, see http://www.debian.org/doc/debian-policy/ or the debian-poli
## cy package




###############################################################################
## DEFINITIOS                                                                ##
###############################################################################
DB_USER='root'
DB_PASS='password'
DB_FILE='/etc/mct/database/templates.sql'

RB_USER='mct'
RB_PASS='password'

BACKTITLE="MCT - MultiClouds Tournament"


AGGREGATE_HOST="agent"
AGGREGATE_NAME="multicloud-tournament"



###############################################################################
## FUNCTIONS                                                                 ##
###############################################################################
##
## BRIEF: select what type of the cloud framework will be used.
## ----------------------------------------------------------------------------
## 
function select_cloud_framework(){

    MENU1="SELECT"
    MENU2="Choice the cloud framework to use:"

    OPT=$(dialog --backtitle "${BACKTITLE}" --title "${MENU1}" \
                 --clear                                       \
                 --colors                                      \
                 --stdout                                      \
                 --aspect 50                                   \
                 --menu "${MENU2}" 0 40 3                      \
                 "1" "OpenStack"                               \
                 "2" "CloudStack"                              \
                 "3" "Emulator")
    echo ${OPT}
    return 0;
}


##
## BRIEF: get the data.
## ----------------------------------------------------------------------------
## @PARAM 1 == what will be get.
##
function get_data() {
    MENU1="ENTRY WITH DATA"

    ENTRY=''
    while [ -z ${ENTRY} ]; do
        ENTRY=$(dialog --backtitle "${BACKTITLE}" --title "${MENU1}" \
                       --clear                                       \
                       --colors                                      \
                       --stdout                                      \
                       --aspect 50                                   \
                       --inputbox "${1}" 0 0 )

        ## Case the entry is empty show a warning message to user.
        if [ -z ${ENTRY} ]; then
            dialog --backtitle "${BACKTITLE}" --title "WARNING!" \
                   --colors                                      \
                   --stdout                                      \
                   --aspect 50                                   \
                   --ok-label "Next"                             \
                   --msgbox "Please! Entry with data!" 0 0
        fi
    done

    echo ${ENTRY}
    return 0
}


##
## BRIEF: get the password.
## ----------------------------------------------------------------------------
## @PARAM 1 == what will be get.
##
function get_pass() {
    MENU1="ENTRY WITH DATA"

    PASS=''
    while [ -z ${PASS} ]; do
        PASS=$(dialog --backtitle "${BACKTITLE}" --title "${MENU1}" \
                      --clear                                       \
                      --colors                                      \
                      --stdout                                      \
                      --aspect 50                                   \
                      --insecure                                    \
                      --passwordbox "${1}" 0 0 )

        ## Case the entry is empty show a warning message to user.
        if [ -z ${PASS} ]; then
            dialog --backtitle "${BACKTITLE}" --title "WARNING!" \
                   --colors                                      \
                   --stdout                                      \
                   --aspect 50                                   \
                   --ok-label "Next"                             \
                   --msgbox "Please! Entry with password!" 0 0
        fi
    done

    echo ${PASS}
    return 0
}


##
## BRIEF: setting the correct configuration case the agent node is to openstack
## ----------------------------------------------------------------------------
## 
function conf_openstack() {

    ## Config others things.
    ## Insert repository: 
    ## Instal packages:
    ## apt-get install nova-compute

    ## Get the openstack crendentiais:
    #INF1=admin
    #INF2=admin
    #INF3=password
    #INF4=http://controller:35357/v2.0
    
    INF1=$(get_data "Tenant Name:")
    INF2=$(get_data "Client Name:")
    INF3=$(get_pass "Client Pass:")
    INF4=$(get_data "Authentication URL:")

    ## Export all openstack credentials:
    export OS_TENANT_NAME=${INF1}
    export OS_USERNAME=${INF2}
    export OS_PASSWORD=${INF3}
    export OS_AUTH_URL=${INF4}

    ## Check if the aggregate is alway created. If not create the new aggregate.
    AGGREGATE_EXIST=$(nova aggregate-list|grep ${AGGREGATE_NAME})

    if [ -z ${AGGREGATE_EXIST} ]; then
        nova aggregate-create ${AGGREGATE_NAME} ${AGGREGATE_NAME}
        ID=$(nova aggregate-list|grep ${AGGREGATE_NAME} | cut -d'|' -f2)
        nova aggregate-add-host 1 ${AGGREGAT_HOST}
    fi

    ## Create a new tenant to mct:
    keystone tenant-create --name mct --description "Multi-Clouds Tournament"
    keystone user-create   --name mct --tenant mct --pass password --email mct@mct
    return 0;
}




###############################################################################
## MAIN                                                                      ##
###############################################################################
case "${1}" in

    ## Execute the action:
    configure)

        ## Creat the user (and password) and setting the correct permission to
        ## then.
        rabbitmqctl add_user ${RB_USER} ${RB_PASS}
        rabbitmqctl set_permissions ${RB_USER} ".*" ".*" ".*"

        ## Getting the option from user:
        VALRET=$(select_cloud_framework);

        case "${VALRET}" in
            1)
                ## Configure openstack enviroment.
                conf_openstack
                ;;
        esac

        ## Create new database and tables. Create user and setting perminsion
        ## to.
        mysql -u${DB_USER} -p${DB_PASS} < ${DB_FILE}
        ;;

    ## Execute actions when abort-upgrade, abort-remove and abort-debconfigure
    ## is invoked.
    abort-upgrade|abort-remove|abort-deconfigure)
        exit 0
        ;;

    *)
        echo "postinst called with unknown argument \`${1}'" >&2
        exit 1
        ;;
esac


## The dh_installdeb will replace this with shell code automatically generated
## by other debhelper scripts.

exit 0
